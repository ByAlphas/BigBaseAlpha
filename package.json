{
  "name": "bigbasealpha",
  "version": "1.5.2",
  "description": "Enterprise-Grade NoSQL Database System with Modular Logger & Offline HSM Security - Complete database platform with professional text-based logging, encryption, caching, indexing, JWT authentication, auto-generated REST API, real-time dashboard, and master-slave replication",
  "type": "module",
  "main": "src/alpha.js",
  "author": "ByAlphas",
  "license": "Apache-2.0",
  "homepage": "https://github.com/ByAlphas/bigbasealpha",
  "repository": {
    "type": "git",
    "url": "https://github.com/ByAlphas/bigbasealpha.git"
  },
  "bugs": {
    "url": "https://github.com/ByAlphas/bigbasealpha/issues"
  },
  "bin": {
    "bigbase": "./src/cli/index.js"
  },
  "scripts": {
    "start": "node src/alpha.js",
    "cli": "node src/cli/index.js",
    "dashboard": "node src/dashboard/server.js",
    "benchmark": "node simple-benchmark.js",
    "benchmark:full": "node benchmark-comparison.js",
    "performance": "node simple-benchmark.js",
    "dev": "node --watch src/dashboard/server.js",
    "build": "echo 'No build step required for pure JavaScript'",
    "backup": "node src/cli/index.js backup",
    "restore": "node src/cli/index.js restore",
    "init": "node src/cli/index.js init",
    "status": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => { console.log(JSON.stringify(alpha.getSystemStatus(), null, 2)); }); })\"",
    "stats": "node src/cli/index.js stats",
    "demo:ui": "node examples/terminal-ui-demo.js",
    "demo:collections": "node examples/collections-performance-demo.js",
    "demo:security": "node examples/security-demo.js",
    "verify:security": "node quick-security-verify.js",
    "hsm:demo": "node demo-hsm.js",
    "hsm:health": "node -e \"import('./src/security/hsm.js').then(({OfflineHSM}) => { const hsm = new OfflineHSM(); hsm._initializeSecureStorage().then(() => hsm.healthCheck()).then(h => console.log('HSM Health:', h)); })\"",
    "hsm:status": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => { const status = alpha.hsm.getStatus(); console.log('HSM Status:', status); }); })\"",
    "monitor:cpu": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => alpha.monitor('cpu')); })\"",
    "monitor:memory": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => alpha.monitor('memory')); })\"",
    "performance:report": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => { alpha.generatePerformanceReport(); alpha.close(); }); })\"",
    "demo:paranoia": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => { alpha.enableParanoia(); console.log('Paranoia mode active'); alpha.close(); }); })\"",
    "emergency:help": "node -e \"console.log('🚨 Emergency shutdown requires:'); console.log('{ confirm: true, safetyCheck: true, emergencyCode: \\\"EMERGENCY_DESTROY_ALL_DATA\\\" }'); console.log('⚠️  THIS WILL DESTROY ALL DATA PERMANENTLY!');\"",
    "api:start": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => alpha.startRESTAPI()); })\"",
    "dashboard:realtime": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => alpha.startRealtimeDashboard()); })\"",
    "replication:master": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => alpha.startReplication({role: 'master'})); })\"",
    "replication:slave": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => alpha.startReplication({role: 'slave'})); })\"",
    "auth:demo": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(async () => { const user = await alpha.createUser({username: 'admin', password: 'admin123', role: 'admin'}); console.log('Demo user created:', user); }); })\"",
    "services:start": "node -e \"import('./src/alpha.js').then(({default: Alpha}) => { const alpha = new Alpha(); alpha.init().then(() => alpha.startAllServices()); })\""
  },
  "keywords": [
    "database",
    "nosql",
    "json",
    "custom-database",
    "encryption",
    "caching",
    "indexing",
    "dashboard",
    "cli",
    "javascript",
    "node",
    "file-based",
    "embedded",
    "lightweight",
    "professional",
    "enterprise",
    "modular-logger",
    "bigbase",
    "alpha",
    "redis-compatible",
    "memory-cache",
    "key-value-store",
    "terminal-ui",
    "collection-system",
    "collections",
    "query-engine",
    "performance",
    "lazy-write",
    "performance-analytics",
    "monitoring",
    "profiling",
    "charts",
    "dashboard-cli",
    "security",
    "hsm",
    "hardware-security-module",
    "offline-security",
    "air-gapped",
    "tamper-detection",
    "encrypted-storage",
    "privacy",
    "self-destruct",
    "dead-mans-switch",
    "paranoia-mode",
    "one-time-keys",
    "decoy-database",
    "execution-triggers",
    "secure-wipe"
  ],
  "dependencies": {
    "bcrypt": "^6.0.0",
    "colors": "^1.4.0",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "ws": "^8.18.3"
  },
  "engines": {
    "node": ">=14.0.0",
    "npm": ">=6.0.0"
  },
  "files": [
    "src/",
    "examples/",
    "README.md",
    "LICENSE",
    "NOTICE",
    "CONTRIBUTING.md",
    "CHANGELOG.md"
  ],
  "config": {
    "port": "3000",
    "default_db_path": "./bigbase_data"
  },
  "bigbase": {
    "version": "1.0.0",
    "features": [
      "multi-format-storage",
      "encryption",
      "caching",
      "indexing",
      "dashboard",
      "cli",
      "plugins",
      "audit-logging",
      "backup-restore",
      "redis-cache-layer"
    ],
    "formats": [
      "json",
      "binary",
      "hybrid"
    ],
    "security": [
      "aes-encryption",
      "bcrypt-hashing",
      "audit-logs"
    ],
    "performance": [
      "memory-caching",
      "indexing",
      "query-optimization"
    ],
    "tools": [
      "web-dashboard",
      "cli-interface",
      "monitoring"
    ]
  }
}
